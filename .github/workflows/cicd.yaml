name: CI

on:
  push:
    branches:
      - master

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Install dependencies
        run: |
          pip3 install -r requirements.txt
      
      - name: Run unittests
        run: |
          pytest test/test.py 
      
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Determine Docker image tag
        id: image
        run: |
          IMAGE_TAG="${{ steps.branch-name.outputs.current_branch }}_${{ github.sha }}"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: docker build 
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/python-fast-api:${{ steps.image.outputs.tag }} .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: docker push 
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/python-fast-api:${{ steps.image.outputs.tag }}
      
    outputs:
        image_tag: ${{ steps.image.outputs.tag }}

  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:    
      
      - name: deploy DEMO API
        uses: appleboy/ssh-action@v0.1.4
        env:
          DOCKER_IMAGE: "${{ secrets.DOCKER_USERNAME }}/python-fast-api"
          TAG: ${{ needs.ci.outputs.image_tag }}
        with:
          host: ${{ secrets.SERVERS }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: DOCKER_IMAGE, TAG
          script: |
            #!/bin/bash
            echo "Stopping Service..."
            sleep 1
            API=$(docker ps -q -f name=api )
            if [ ! -z $API ]
            then
              docker stop $API
              docker rm $API
              echo "Service stopped..."
            fi
            sleep 1
            echo "Starting service with new version..."
            echo $DOCKER_IMAGE
            echo $TAG
            docker run --name api -d -p 80:8080 $DOCKER_IMAGE:$TAG
            echo "Service has started"
      
      - name: Verify Deployment 
        env:
          SERVER: ${{ secrets.API_ENDPOINT }}
        run: |
          #!/bin/bash
          RESPONSE=$(curl --write-out '%{http_code}' --silent --output /dev/null ${SERVER})
          if [ $RESPONSE -ne "200" ]
          then
              echo "Service Unavailable"
              exit 1
          fi
          echo "Service is Healthy"
          exit 0
      
      - name: Notify Successful
        run: |
          echo "Success!"
      
      - name: Notify Fail
        if: ${{ failure() }}
        run: |
          echo "The deployment has failed!"